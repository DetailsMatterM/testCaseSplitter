@Test
    public void testMetricsRepositoryStackTraceTracker() {
        StackTraceTracker flushStackTraceTracker = getGraph().getMetricsRegistry().getStackTraceTracker(getGraph().getClass(), "flush", "stack");
        getGraph().addVertex("vPrimer", VISIBILITY_A, AUTHORIZATIONS_A, CONCEPT_TYPE_THING);
        getGraph().flush();
        flushStackTraceTracker.reset();
        assertStackTraceTrackerCount(flushStackTraceTracker, path -> {
            StackTraceTracker.StackTraceItem item = path.get(path.size() - 1);
            assertEquals("count mismatch: " + item, 0, item.getCount());
        });

        getGraph().addVertex("v1", VISIBILITY_A, AUTHORIZATIONS_A, CONCEPT_TYPE_THING);
        getGraph().flush();

        assertStackTraceTrackerCount(flushStackTraceTracker, path -> {
            StackTraceTracker.StackTraceItem item = path.get(path.size() - 1);
            assertEquals("count mismatch: " + item, 1, item.getCount());
        });

        getGraph().addVertex("v2", VISIBILITY_A, AUTHORIZATIONS_A, CONCEPT_TYPE_THING);
        getGraph().flush();

        assertStackTraceTrackerCount(flushStackTraceTracker, path -> {
            int expectedCount = 2;
            for (StackTraceTracker.StackTraceItem item : path) {
                if (item.toString().contains("testMetricsRepositoryStackTraceTracker")) {
                    expectedCount = 1;
                }
                assertEquals("count mismatch: " + item, expectedCount, item.getCount());
            }
        });
    }

    